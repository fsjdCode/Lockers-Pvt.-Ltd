package com.exception.handle;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class FunctionRepo {



	//Primary Method 1 - This method will give search result for a particular file.
	static void searchYourFile(String inputString) {
		//Scanner scanner = new Scanner(System.in);
		//System.out.println("Would you like to Search? Enter file name :-- ");
		//String inputString = scanner.nextLine();
		String filePath = rightFormatofFilePath();
		try{
			Path path = Paths.get(filePath);

			List<Path> result = findByFileName(path, inputString);

			if(result.isEmpty() ){
				System.out.println("Oops! Your file,  "+ inputString + " does not exist. Better luck next time !");
			}
			else{

				result.forEach(x -> System.out.println("Yes,found! Your File path is: - "+x));
			}
		}catch (IOException e) {
			e.printStackTrace();
		}

	}

	//Auxiliary Method 2 - This method will return correct format of the file Path.(from C:\Users\sasmita\workspace\SimpleLearnLiveClasses to "E:\\JAVA\\SampleFolder")
	static String rightFormatofFilePath(){
		String OrgiPath = returnCurrentWorkingDirectory();
		String filePath = OrgiPath.replace("\\", "\\\\");
		//System.out.println(filePath);
		return filePath; ////o/p - C:\\Users\\sasmita\\workspace\\SimpleLearnLiveClasses
	}

	//Auxiliary Method 3 - This method will return current working directory
	static String returnCurrentWorkingDirectory(){
		String cwd = System.getProperty("user.dir");
		return cwd;
	}
	//Auxiliary Method 4 - This method search for a particular file and return the result.
	private static List<Path> findByFileName(Path path, String fileName)
			throws IOException {

		List<Path> result;
		try (Stream<Path> pathStream = Files.find(path,
				Integer.MAX_VALUE,
				(p, basicFileAttributes) ->
		p.getFileName().toString().equals(fileName)) //use "equalsIgnoreCase" to ignore case sensitivity.
				) {
			result = pathStream.collect(Collectors.toList());
		}
		return result;

	}
	//Primary Method 5 - This method will create a new file based on the given name.
	static void creatNewFile(String inputString){
		//Scanner scanner = new Scanner(System.in);
		//System.out.println("Would you like to create a new file? Enter file name :-- ");

		//String inputString = scanner.nextLine();
		String cwd = System.getProperty("user.dir");

		String filePath = cwd.replace("\\", "/");

		String fileName = filePath +"/" +inputString;

		Path path = Paths.get(fileName);
		// default, create, truncate and write to it.

		try (BufferedWriter writer =
				Files.newBufferedWriter(path, StandardCharsets.UTF_8)) {

			//writer.write("This is your new  file.");

		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("Your file, "+inputString+ " has been created successfully...!");
	}

	//Primary Method 6 - This method will delete a file based on the given name.
	static void deleteFile(String deInputString) {
		//Scanner scanner = new Scanner(System.in);
		//System.out.println("Would you like to delete? Enter file name :-- ");
		//String deInputString = scanner.nextLine();


		String fp = rightFormatofFilePath();
		String deFilePath = fp +"\\\\" +deInputString;
		//System.out.println(deFilePath);
		//Code to delete the file
		File file = new File(deFilePath);

		if (file.delete()) {
			System.out.println("File deleted successfully");
		}
		else {
			System.out.println("Failed to delete, File not found!");
		}
	}
	//Primary Method 7 - This method will be used for welcome screen
	static void displayWelcomeScreen(){

		System.out.println(" ~~LockedMe.com~~");
		System.out.println(" Developer Details:- " + "\n -Amarendra Sahoo" +"\n -Full Stack Java Developer" 
				+"\n -Company Name - SimpliLearn");
		System.out.println("Your current working directory is: = " + returnCurrentWorkingDirectory());
		ArrayList<String> fileList = sortFileNames();
		for(String l : fileList){

			System.out.println(l);
		}
		System.out.println("The total number of files and directories are : " + fileList.size());   
	}

	//Primary Method 8 - This method will sort the file names in ascending order.
	static ArrayList<String> sortFileNames(){
		ArrayList<String> list = new ArrayList<String>();
		String fPath = rightFormatofFilePath();
		File f = new File(fPath);
		String[] S = f.list();

		for(String s1 : S){

			list.add(s1);
		}

		// Sorting ArrayList in ascending Order   
		Collections.sort(list); 
		return list;
	}

}
